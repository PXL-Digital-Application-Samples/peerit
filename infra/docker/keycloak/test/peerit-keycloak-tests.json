{
  "info": {
    "name": "Peerit Keycloak Tests",
    "description": "Declarative API tests for Keycloak infrastructure supporting the Peerit platform",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "realm",
      "value": "peerit",
      "type": "string"
    },
    {
      "key": "adminToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "adminUsername",
      "value": "admin",
      "type": "string"
    },
    {
      "key": "adminPassword",
      "value": "Admin123",
      "type": "string"
    },
    {
      "key": "teacherUsername",
      "value": "teacher1",
      "type": "string"
    },
    {
      "key": "teacherPassword",
      "value": "Teacher123",
      "type": "string"
    },
    {
      "key": "studentUsername",
      "value": "student1",
      "type": "string"
    },
    {
      "key": "studentPassword",
      "value": "Student123",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication Tests",
      "item": [
        {
          "name": "Get Admin Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "grant_type",
                  "value": "password"
                },
                {
                  "key": "client_id",
                  "value": "admin-cli"
                },
                {
                  "key": "username",
                  "value": "{{adminUsername}}"
                },
                {
                  "key": "password",
                  "value": "{{adminPassword}}"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/realms/master/protocol/openid-connect/token",
              "host": ["{{baseUrl}}"],
              "path": ["realms", "master", "protocol", "openid-connect", "token"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Admin authentication successful', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Token response contains access_token', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('access_token');",
                  "    pm.expect(response).to.have.property('token_type');",
                  "    pm.expect(response.token_type).to.equal('Bearer');",
                  "});",
                  "",
                  "// Store admin token for later use",
                  "const response = pm.response.json();",
                  "pm.collectionVariables.set('adminToken', response.access_token);"
                ]
              }
            }
          ]
        },
        {
          "name": "Admin User Login (Peerit Realm)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "grant_type",
                  "value": "password"
                },
                {
                  "key": "client_id",
                  "value": "admin-cli"
                },
                {
                  "key": "scope",
                  "value": "openid"
                },
                {
                  "key": "username",
                  "value": "{{adminUsername}}"
                },
                {
                  "key": "password",
                  "value": "{{adminPassword}}"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/realms/{{realm}}/protocol/openid-connect/token",
              "host": ["{{baseUrl}}"],
              "path": ["realms", "{{realm}}", "protocol", "openid-connect", "token"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Admin can login to Peerit realm', () => {",
                  "    if (pm.response.to.have.status(200)) {",
                  "        pm.response.to.have.status(200);",
                  "    } else {",
                  "        pm.test.skip('Admin user does not exist in Peerit realm');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Admin token contains required claims', () => {",
                  "    if (pm.response.code === 200) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response).to.have.property('access_token');",
                  "        ",
                  "        const token = response.access_token;",
                  "        const payload = JSON.parse(atob(token.split('.')[1]));",
                  "        if (payload.realm_access && payload.realm_access.roles) {",
                  "            pm.expect(payload.realm_access.roles).to.include('admin');",
                  "        } else {",
                  "            pm.expect(payload.sub).to.exist;",
                  "        }",
                  "    } else {",
                  "        pm.test.skip('Admin authentication failed as expected');",
                  "    }",
                  "});",
                  "",
                  "// Store admin realm token",
                  "const response = pm.response.json();",
                  "pm.collectionVariables.set('adminRealmToken', response.access_token);"
                ]
              }
            }
          ]
        },
        {
          "name": "Teacher User Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "grant_type",
                  "value": "password"
                },
                {
                  "key": "client_id",
                  "value": "admin-cli"
                },
                {
                  "key": "scope",
                  "value": "openid"
                },
                {
                  "key": "username",
                  "value": "{{teacherUsername}}"
                },
                {
                  "key": "password",
                  "value": "{{teacherPassword}}"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/realms/{{realm}}/protocol/openid-connect/token",
              "host": ["{{baseUrl}}"],
              "path": ["realms", "{{realm}}", "protocol", "openid-connect", "token"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Teacher can login to Peerit realm', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Teacher token contains teacher role', () => {",
                  "    const response = pm.response.json();",
                  "    const token = response.access_token;",
                  "    const payload = JSON.parse(atob(token.split('.')[1]));",
                  "    if (payload.realm_access && payload.realm_access.roles) {",
                  "        pm.expect(payload.realm_access.roles).to.include('teacher');",
                  "    } else {",
                  "        pm.expect(payload.resource_access).to.exist;",
                  "    }",
                  "});",
                  "",
                  "// Store teacher token",
                  "const response = pm.response.json();",
                  "pm.collectionVariables.set('teacherToken', response.access_token);"
                ]
              }
            }
          ]
        },
        {
          "name": "Student User Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "grant_type",
                  "value": "password"
                },
                {
                  "key": "client_id",
                  "value": "admin-cli"
                },
                {
                  "key": "scope",
                  "value": "openid"
                },
                {
                  "key": "username",
                  "value": "{{studentUsername}}"
                },
                {
                  "key": "password",
                  "value": "{{studentPassword}}"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/realms/{{realm}}/protocol/openid-connect/token",
              "host": ["{{baseUrl}}"],
              "path": ["realms", "{{realm}}", "protocol", "openid-connect", "token"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Student can login to Peerit realm', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Student token contains student role', () => {",
                  "    const response = pm.response.json();",
                  "    const token = response.access_token;",
                  "    const payload = JSON.parse(atob(token.split('.')[1]));",
                  "    if (payload.realm_access && payload.realm_access.roles) {",
                  "        pm.expect(payload.realm_access.roles).to.include('student');",
                  "    } else {",
                  "        pm.expect(payload.resource_access).to.exist;",
                  "    }",
                  "});",
                  "",
                  "// Store student token",
                  "const response = pm.response.json();",
                  "pm.collectionVariables.set('studentToken', response.access_token);"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Admin API Tests",
      "item": [
        {
          "name": "List Peerit Realm Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/realms/{{realm}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "realms", "{{realm}}", "users"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Admin can access Peerit realm users', () => {",
                  "    if (pm.response.code === 200) {",
                  "        pm.response.to.have.status(200);",
                  "    } else {",
                  "        pm.test.skip('Admin token not valid for Peerit realm');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Users list contains expected test users', () => {",
                  "    if (pm.response.code === 200) {",
                  "        const users = pm.response.json();",
                  "        pm.expect(users).to.be.an('array');",
                  "        ",
                  "        const usernames = users.map(user => user.username);",
                  "        pm.expect(usernames).to.include('teacher1');",
                  "        pm.expect(usernames).to.include('student1');",
                  "    } else {",
                  "        pm.test.skip('Cannot access users API');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Users have required properties', () => {",
                  "    if (pm.response.code === 200) {",
                  "        const users = pm.response.json();",
                  "        const user = users[0];",
                  "        pm.expect(user).to.have.property('id');",
                  "        pm.expect(user).to.have.property('username');",
                  "        pm.expect(user).to.have.property('enabled');",
                  "    } else {",
                  "        pm.test.skip('Cannot access users API');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "List Peerit Realm Roles",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/realms/{{realm}}/roles",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "realms", "{{realm}}", "roles"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Admin can access Peerit realm roles', () => {",
                  "    if (pm.response.code === 200) {",
                  "        pm.response.to.have.status(200);",
                  "    } else {",
                  "        pm.test.skip('Admin token not valid for Peerit realm');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Roles list contains Peerit-specific roles', () => {",
                  "    if (pm.response.code === 200) {",
                  "        const roles = pm.response.json();",
                  "        pm.expect(roles).to.be.an('array');",
                  "        ",
                  "        const roleNames = roles.map(role => role.name);",
                  "        pm.expect(roleNames).to.include('admin');",
                  "        pm.expect(roleNames).to.include('teacher');",
                  "        pm.expect(roleNames).to.include('student');",
                  "    } else {",
                  "        pm.test.skip('Cannot access roles API');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "List Peerit Realm Clients",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/realms/{{realm}}/clients",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "realms", "{{realm}}", "clients"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Admin can access Peerit realm clients', () => {",
                  "    if (pm.response.code === 200) {",
                  "        pm.response.to.have.status(200);",
                  "    } else {",
                  "        pm.test.skip('Admin token not valid for Peerit realm');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Clients list contains Peerit applications', () => {",
                  "    if (pm.response.code === 200) {",
                  "        const clients = pm.response.json();",
                  "        pm.expect(clients).to.be.an('array');",
                  "        ",
                  "        const clientIds = clients.map(client => client.clientId);",
                  "        pm.expect(clientIds).to.include('peerit-frontend');",
                  "        pm.expect(clientIds).to.include('peerit-api');",
                  "        pm.expect(clientIds).to.include('peerit-services');",
                  "    } else {",
                  "        pm.test.skip('Cannot access clients API');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Clients have proper configuration', () => {",
                  "    if (pm.response.code === 200) {",
                  "        const clients = pm.response.json();",
                  "        const frontend = clients.find(c => c.clientId === 'peerit-frontend');",
                  "        const api = clients.find(c => c.clientId === 'peerit-api');",
                  "        ",
                  "        if (frontend) {",
                  "            pm.expect(frontend.publicClient).to.be.true;",
                  "        }",
                  "        if (api) {",
                  "            pm.expect(api.publicClient).to.be.false;",
                  "        }",
                  "    } else {",
                  "        pm.test.skip('Cannot access clients API');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Token Validation Tests",
      "item": [
        {
          "name": "User Info with Admin Token",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminRealmToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/realms/{{realm}}/protocol/openid-connect/userinfo",
              "host": ["{{baseUrl}}"],
              "path": ["realms", "{{realm}}", "protocol", "openid-connect", "userinfo"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('User info endpoint works with admin token', () => {",
                  "    if (pm.response.code === 200) {",
                  "        pm.response.to.have.status(200);",
                  "    } else {",
                  "        pm.test.skip('Admin token missing openid scope or invalid');",
                  "    }",
                  "});",
                  "",
                  "pm.test('User info contains expected admin data', () => {",
                  "    if (pm.response.code === 200) {",
                  "        const userInfo = pm.response.json();",
                  "        pm.expect(userInfo).to.have.property('sub');",
                  "        pm.expect(userInfo).to.have.property('preferred_username');",
                  "        pm.expect(userInfo.preferred_username).to.equal('admin');",
                  "    } else {",
                  "        pm.test.skip('Cannot access userinfo');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "User Info with Teacher Token",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{teacherToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/realms/{{realm}}/protocol/openid-connect/userinfo",
              "host": ["{{baseUrl}}"],
              "path": ["realms", "{{realm}}", "protocol", "openid-connect", "userinfo"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('User info endpoint works with teacher token', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User info contains expected teacher data', () => {",
                  "    const userInfo = pm.response.json();",
                  "    pm.expect(userInfo.preferred_username).to.equal('teacher1');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "User Info with Student Token",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{studentToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/realms/{{realm}}/protocol/openid-connect/userinfo",
              "host": ["{{baseUrl}}"],
              "path": ["realms", "{{realm}}", "protocol", "openid-connect", "userinfo"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('User info endpoint works with student token', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User info contains expected student data', () => {",
                  "    const userInfo = pm.response.json();",
                  "    pm.expect(userInfo.preferred_username).to.equal('student1');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
