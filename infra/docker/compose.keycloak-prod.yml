# Production-ready Keycloak compose using pre-built Peerit image
# Use: docker compose -f compose.keycloak-prod.yml up -d

services:
  keycloak:
    image: ghcr.io/pxl-digital-application-samples/peerit-keycloak:latest
    container_name: peerit-keycloak
    hostname: keycloak
    environment:
      # Database Configuration (Required)
      KC_DB: postgres
      KC_DB_URL: ${KC_DB_URL:-jdbc:postgresql://host.docker.internal:5432/keycloak}
      KC_DB_USERNAME: ${KC_DB_USERNAME:-keycloak}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD:-keycloak}
      KC_DB_SCHEMA: ${KC_DB_SCHEMA:-public}
      
      # Admin Configuration (Required)
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KC_ADMIN_USERNAME:-admin}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KC_ADMIN_PASSWORD:-admin123}
      
      # Hostname Configuration
      KC_HOSTNAME: ${KC_HOSTNAME:-localhost}
      KC_HTTP_PORT: ${KC_HTTP_PORT:-8080}
      KC_HTTP_ENABLED: ${KC_HTTP_ENABLED:-true}
      KC_HOSTNAME_STRICT: ${KC_HOSTNAME_STRICT:-false}
      KC_HOSTNAME_STRICT_HTTPS: ${KC_HOSTNAME_STRICT_HTTPS:-false}
      
      # Security Configuration
      KC_PROXY: ${KC_PROXY:-edge}
      KC_HEALTH_ENABLED: ${KC_HEALTH_ENABLED:-true}
      KC_METRICS_ENABLED: ${KC_METRICS_ENABLED:-true}
      
      # Logging
      KC_LOG_LEVEL: ${KC_LOG_LEVEL:-INFO}
      
    ports:
      - "${KEYCLOAK_PORT:-8080}:8080"
      
    # Use external database - no volumes needed for data
    depends_on: []
    
    networks:
      - peerit-network
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/realms/master"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
      
    restart: unless-stopped

networks:
  peerit-network:
    external: true
