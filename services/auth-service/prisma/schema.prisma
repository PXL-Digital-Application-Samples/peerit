// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserCredential {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                String    @unique @db.VarChar(255)
  passwordHash         String    @map("password_hash") @db.VarChar(255)
  isActive             Boolean   @default(true) @map("is_active")
  failedLoginAttempts  Int       @default(0) @map("failed_login_attempts")
  lockedUntil          DateTime? @map("locked_until")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")
  lastLogin            DateTime? @map("last_login")

  // Relations
  magicLinkTokens MagicLinkToken[]
  refreshTokens   RefreshToken[]

  @@map("user_credentials")
  @@index([email])
}

model MagicLinkToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token     String   @unique @db.VarChar(255)
  userId    String   @map("user_id") @db.Uuid
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  usedAt    DateTime? @map("used_at")
  purpose   String   @default("login") @db.VarChar(50) // 'login' or 'review_session'
  sessionId String?  @map("session_id") @db.Uuid // For review sessions
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user UserCredential @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("magic_link_tokens")
  @@index([token])
  @@index([expiresAt])
  @@index([userId])
}

model RefreshToken {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token     String    @unique @db.VarChar(255)
  userId    String    @map("user_id") @db.Uuid
  expiresAt DateTime  @map("expires_at")
  revoked   Boolean   @default(false)
  revokedAt DateTime? @map("revoked_at")
  createdAt DateTime  @default(now()) @map("created_at")
  lastUsed  DateTime? @map("last_used")
  userAgent String?   @map("user_agent") @db.Text
  ipAddress String?   @map("ip_address") @db.Inet

  // Relations
  user UserCredential @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
  @@index([token])
  @@index([userId])
  @@index([expiresAt])
}
