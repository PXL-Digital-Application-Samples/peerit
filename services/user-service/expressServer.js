// const { Middleware } = require('swagger-express-middleware');
const http = require('http');
const fs = require('fs');
const path = require('path');
const swaggerUI = require('swagger-ui-express');
const jsYaml = require('js-yaml');
const express = require('express');
const cors = require('cors');
const cookieParser = require('cookie-parser');
const bodyParser = require('body-parser');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const OpenApiValidator = require('express-openapi-validator');
const logger = require('./logger');
const config = require('./config');
const oauth2Security = require('./middleware/oauth2Security');
const { getDatabaseService } = require('./services/database');

// Load environment variables
require('dotenv').config();

class ExpressServer {
  constructor(port, openApiYaml) {
    this.port = port;
    this.app = express();
    this.openApiPath = openApiYaml;
    try {
      this.schema = jsYaml.safeLoad(fs.readFileSync(openApiYaml));
    } catch (e) {
      logger.error('failed to start Express Server', e.message);
    }
    this.setupMiddleware();
  }

  setupMiddleware() {
    // Security middleware
    this.app.use(helmet());
    
    // CORS
    this.app.use(cors({
      origin: process.env.FRONTEND_URL || 'http://localhost:3000',
      credentials: true
    }));

    // Rate limiting
    const limiter = rateLimit({
      windowMs: 15 * 60 * 1000, // 15 minutes
      max: 100, // limit each IP to 100 requests per windowMs
      message: 'Too many requests from this IP, please try again later.'
    });
    this.app.use(limiter);

    // Body parsing
    this.app.use(bodyParser.json({ limit: '14MB' }));
    this.app.use(express.json());
    this.app.use(express.urlencoded({ extended: false }));
    this.app.use(cookieParser());
    
    // Health check endpoint
    this.app.get('/health', async (req, res) => {
      const dbService = getDatabaseService();
      const isDbHealthy = await dbService.healthCheck();
      
      res.status(isDbHealthy ? 200 : 503).json({
        status: isDbHealthy ? 'healthy' : 'unhealthy',
        timestamp: new Date().toISOString(),
        service: 'user-service',
        database: isDbHealthy ? 'connected' : 'disconnected'
      });
    });
    
    // Health check endpoint for Docker and orchestrators
    this.app.get('/health', (req, res) => {
      res.status(200).json({
        status: 'healthy',
        timestamp: new Date().toISOString(),
        service: 'peerit-user-service-generated',
        version: process.env.SERVICE_VERSION || '1.0.0'
      });
    });
    
    // Simple test to see that the server is up and responding
    this.app.get('/hello', (req, res) => res.send(`Hello World. path: ${this.openApiPath}`));
    
    // Send the openapi document *AS GENERATED BY THE GENERATOR*
    this.app.get('/openapi', (req, res) => res.sendFile((path.join(__dirname, 'api', 'openapi.yaml'))));
    
    // View the openapi document in a visual interface. Should be able to test from this page
    this.app.use('/api-docs', swaggerUI.serve, swaggerUI.setup(this.schema, {
      swaggerOptions: {
        url: '/openapi'
      }
    }));
    
    // OAuth2 redirect endpoints for Swagger UI
    this.app.get('/login-redirect', (req, res) => {
      res.status(200);
      res.json(req.query);
    });
    this.app.get('/oauth2-redirect.html', (req, res) => {
      res.status(200);
      res.json(req.query);
    });
    
    // OpenAPI validator with security handlers
    this.app.use(
      OpenApiValidator.middleware({
        apiSpec: this.openApiPath,
        operationHandlers: path.join(__dirname),
        fileUploader: { dest: config.FILE_UPLOAD_PATH },
        // Configure security handlers for OAuth2
        validateSecurity: {
          handlers: {
            keycloakOAuth2: async (req, scopes, schema) => {
              return await oauth2Security.validateOAuth2(req, scopes);
            }
          }
        }
      }),
    );
  }

  async launch() {
    // Initialize database connection (optional for testing)
    try {
      const dbService = getDatabaseService();
      if (process.env.DATABASE_URL) {
        await dbService.connect();
        logger.info('Database connected successfully');
      } else {
        logger.warn('DATABASE_URL not set, running without database');
      }
    } catch (error) {
      logger.error('Failed to connect to database:', error);
      if (process.env.NODE_ENV === 'production') {
        process.exit(1);
      } else {
        logger.warn('Continuing without database in development mode');
      }
    }

    // eslint-disable-next-line no-unused-vars
    this.app.use((err, req, res, next) => {
      // format errors
      res.status(err.status || 500).json({
        message: err.message || err,
        errors: err.errors || '',
      });
    });

    this.server = http.createServer(this.app).listen(this.port);
    console.log(`Listening on port ${this.port}`);
  }

  async close() {
    // Disconnect from database
    try {
      const dbService = getDatabaseService();
      await dbService.disconnect();
      logger.info('Database disconnected');
    } catch (error) {
      logger.error('Error disconnecting from database:', error);
    }

    if (this.server !== undefined) {
      await this.server.close();
      console.log(`Server on port ${this.port} shut down`);
    }
  }
}

module.exports = ExpressServer;
