openapi: 3.1.0
info:
  title: Peerit User Service API
  description: User profiles, roles, and team membership management for the Peerit platform
  version: 1.0.0
  contact:
    name: Peerit Team
    url: https://github.com/PXL-Digital-Application-Samples/peerit
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3020
    description: Development server
  - url: https://api.peerit.dev/users
    description: Production server

tags:
  - name: User Profiles
    description: User profile management and CRUD operations
  - name: Role Management
    description: Role assignment and validation endpoints
  - name: Team Membership
    description: User-team relationship management
  - name: User Sync
    description: Keycloak user synchronization endpoints
  - name: Service
    description: Internal service endpoints
  - name: Monitoring
    description: Health checks and metrics

paths:
  # User Profile Management
  /api/users/profile:
    get:
      tags: [User Profiles]
      summary: Get current user profile
      description: Retrieve the authenticated user's profile information
      security:
        - keycloakOAuth2: [admin, teacher, student]
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
        '404':
          description: User profile not found
    put:
      tags: [User Profiles]
      summary: Update user profile
      description: Update the authenticated user's profile information
      security:
        - keycloakOAuth2: [admin, teacher, student]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized

  /api/users/{userId}/profile:
    get:
      tags: [User Profiles]
      summary: Get user profile by ID
      description: Retrieve a specific user's profile (admin or team members only)
      security:
        - keycloakOAuth2: [admin, teacher]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found

  # Role Management
  /api/users/{userId}/roles:
    get:
      tags: [Role Management]
      summary: Get user roles
      description: Retrieve roles assigned to a user
      security:
        - keycloakOAuth2: [admin, teacher]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User roles retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserRole'
    post:
      tags: [Role Management]
      summary: Assign role to user
      description: Assign a role to a user (admin only)
      security:
        - keycloakOAuth2: [admin]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleAssignment'
      responses:
        '201':
          description: Role assigned successfully
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /api/users/{userId}/roles/{roleId}:
    delete:
      tags: [Role Management]
      summary: Remove role from user
      description: Remove a role from a user (admin only)
      security:
        - keycloakOAuth2: [admin]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: roleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Role removed successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Role assignment not found

  # Team Membership
  /api/users/{userId}/teams:
    get:
      tags: [Team Membership]
      summary: Get user's team memberships
      description: Retrieve all teams a user belongs to
      security:
        - keycloakOAuth2: [admin, teacher, student]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Team memberships retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamMembership'

  /api/users/{userId}/teams/{teamId}:
    post:
      tags: [Team Membership]
      summary: Add user to team
      description: Add a user to a team with specified role
      security:
        - keycloakOAuth2: [admin, teacher]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamMembershipRequest'
      responses:
        '201':
          description: User added to team successfully
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '409':
          description: User already in team
    delete:
      tags: [Team Membership]
      summary: Remove user from team
      description: Remove a user from a team
      security:
        - keycloakOAuth2: [admin, teacher]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User removed from team successfully
        '401':
          description: Unauthorized
        '404':
          description: Team membership not found

  # User Synchronization
  /api/sync/keycloak:
    post:
      tags: [User Sync]
      summary: Sync users from Keycloak
      description: Synchronize user data from Keycloak (admin only)
      security:
        - keycloakOAuth2: [admin]
      responses:
        '200':
          description: Sync completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /api/sync/users/{userId}:
    post:
      tags: [User Sync]
      summary: Sync specific user from Keycloak
      description: Synchronize specific user data from Keycloak
      security:
        - keycloakOAuth2: [admin]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User synced successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
        '404':
          description: User not found in Keycloak

  # Service Endpoints
  /api/users/search:
    get:
      tags: [Service]
      summary: Search users
      description: Search users by various criteria (internal service use)
      security:
        - keycloakOAuth2: [admin, teacher]
      parameters:
        - name: query
          in: query
          schema:
            type: string
        - name: role
          in: query
          schema:
            type: string
        - name: team
          in: query
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Users found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSearchResult'

  # Monitoring
  /health:
    get:
      tags: [Monitoring]
      summary: Health check
      description: Service health status
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

  /info:
    get:
      tags: [Monitoring]
      summary: Service information
      description: Service version and build information
      responses:
        '200':
          description: Service information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceInfo'

components:
  schemas:
    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User unique identifier
        keycloakId:
          type: string
          description: Keycloak user ID
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        displayName:
          type: string
        bio:
          type: string
          maxLength: 500
        profilePicture:
          type: string
          format: uri
        preferences:
          type: object
          additionalProperties: true
        lastActive:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - keycloakId
        - email
        - firstName
        - lastName

    UserProfileUpdate:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        displayName:
          type: string
        bio:
          type: string
          maxLength: 500
        profilePicture:
          type: string
          format: uri
        preferences:
          type: object
          additionalProperties: true

    UserRole:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          enum: [admin, teacher, student]
        description:
          type: string
        assignedAt:
          type: string
          format: date-time
        assignedBy:
          type: string
          format: uuid
      required:
        - id
        - name

    RoleAssignment:
      type: object
      properties:
        roleName:
          type: string
          enum: [admin, teacher, student]
        metadata:
          type: object
          additionalProperties: true
      required:
        - roleName

    TeamMembership:
      type: object
      properties:
        teamId:
          type: string
          format: uuid
        teamName:
          type: string
        teamRole:
          type: string
          enum: [leader, member]
        joinedAt:
          type: string
          format: date-time
        isActive:
          type: boolean
      required:
        - teamId
        - teamName
        - teamRole

    TeamMembershipRequest:
      type: object
      properties:
        teamRole:
          type: string
          enum: [leader, member]
          default: member
        metadata:
          type: object
          additionalProperties: true

    UserSearchResult:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserProfile'
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer
      required:
        - users
        - total

    SyncResult:
      type: object
      properties:
        syncedUsers:
          type: integer
        createdUsers:
          type: integer
        updatedUsers:
          type: integer
        errors:
          type: array
          items:
            type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
      required:
        - syncedUsers
        - createdUsers
        - updatedUsers

    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        dependencies:
          type: object
          properties:
            database:
              type: string
              enum: [connected, disconnected]
            redis:
              type: string
              enum: [connected, disconnected]
            keycloak:
              type: string
              enum: [connected, disconnected]
      required:
        - status
        - timestamp

    ServiceInfo:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        description:
          type: string
        buildTime:
          type: string
          format: date-time
        commit:
          type: string
      required:
        - name
        - version

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: integer
        timestamp:
          type: string
          format: date-time
      required:
        - error
        - message

  securitySchemes:
    keycloakOAuth2:
      type: oauth2
      description: Keycloak OAuth2 with role-based scopes
      flows:
        authorizationCode:
          authorizationUrl: http://localhost:8080/realms/peerit/protocol/openid-connect/auth
          tokenUrl: http://localhost:8080/realms/peerit/protocol/openid-connect/token
          scopes:
            admin: "Full administrative access to all platform features"
            teacher: "Teacher role - can manage courses, teams, and view all reviews"
            student: "Student role - can join teams and submit peer reviews"
        password:
          tokenUrl: http://localhost:8080/realms/peerit/protocol/openid-connect/token
          scopes:
            admin: "Full administrative access to all platform features"
            teacher: "Teacher role - can manage courses, teams, and view all reviews"
            student: "Student role - can join teams and submit peer reviews"

security:
  - keycloakOAuth2: []
