services:
  # Test database
  postgres-test:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: peerit_test
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
    ports:
      - "5433:5432"
    command: postgres -c 'max_connections=100' -c 'shared_buffers=128MB'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d peerit_test"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Test Redis
  redis-test:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Keycloak for integration testing
  keycloak-test:
    # Use pre-built GitHub image with Peerit realm
    image: ${KEYCLOAK_IMAGE:-ghcr.io/pxl-digital-application-samples/peerit-keycloak:latest}
    environment:
      # Bootstrap admin configuration
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: Admin123
      
      # Database Configuration - using default postgres user with full privileges
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-test:5432/peerit_test
      KC_DB_USERNAME: testuser
      KC_DB_PASSWORD: testpass
      
      # Enable health and metrics
      KC_HEALTH_ENABLED: "true"
      KC_METRICS_ENABLED: "true"
      KC_HTTP_RELATIVE_PATH: "/"
      
    ports:
      - "8180:8080"
    # No volumes needed - realm config and themes are built into the GitHub image
    depends_on:
      postgres-test:
        condition: service_healthy
    command: ["start-dev", "--import-realm"]
    healthcheck:
      test: ["CMD", "bash", "-c", ">/dev/tcp/localhost/8080"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

